sudo: required
# We need the systemd for the kubeadm and it's default from 16.04+
dist: xenial
env:
    global:
        - CHANGE_MINIKUBE_NONE_USER=true
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config

services:
    - docker

language: java
jdk: openjdk8

before_install:
    - sudo apt-get -qq -y install conntrack

before_script:
    # Download kubectl, which is a requirement for using minikube.
    - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.20.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
    # Download minikube.
    - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.16.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
    - mkdir -p $HOME/.kube $HOME/.minikube
    - touch $KUBECONFIG
    - sudo minikube start --profile=minikube --vm-driver=none --kubernetes-version=v1.20.1
    - minikube update-context --profile=minikube
    - "sudo chown -R travis: /home/travis/.minikube/"
    - eval "$(minikube docker-env --profile=minikube)" && export DOCKER_CLI='docker'
    - docker run --rm -d -it -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456  -v /var/run/docker.sock:/var/run/docker.sock --name chaos-mysql-5.6 mysql:5.6 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-time_zone='+8:00'
    - docker exec -i chaos-mysql-5.6 mysql -uroot -p123456 < sql/chaos-platform.sql

script:
    # Following is just to demo that the kubernetes cluster works.
    - kubectl cluster-info
    # Wait for kube-dns to be ready.
    - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
    # Create example Redis deployment on Kubernetes.
    - kubectl run travis-example --image=redis --labels="app=travis-example"
    # Make sure created pod is scheduled and running.
    - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n default get pods -lapp=travis-example -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for travis-example deployment to be available"; kubectl get pods -n default; done
    - mvn test

after_success:
    - bash <(curl -s https://codecov.io/bash)
